!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AddEdge	Graph.c	/^void AddEdge(Vertex* V, Edge* E){$/;"	f
AddVertex	Graph.c	/^void AddVertex(Graph* G, Vertex* V){$/;"	f
AdjacencyList	Graph.h	/^	struct tagEdge* AdjacencyList; \/\/near by node list$/;"	m	struct:tagVertex	typeref:struct:tagVertex::tagEdge
CC	Makefile	/^CC = g++$/;"	m
CFLAGS	Makefile	/^CFLAGS = -g -c -W -Wall$/;"	m
CreateEdge	Graph.c	/^Edge* CreateEdge(Vertex* From, Vertex* Target, int Weight){$/;"	f
CreateGraph	Graph.c	/^Graph* CreateGraph(){$/;"	f
CreateVertex	Graph.c	/^Vertex* CreateVertex(ElementType Data){$/;"	f
Data	Graph.h	/^	ElementType Data;  \/\/data$/;"	m	struct:tagVertex
DestroyEdgt	Graph.c	/^void DestroyEdgt(Edge* E){$/;"	f
DestroyGraph	Graph.c	/^void DestroyGraph(Graph* G){$/;"	f
DestroyVertex	Graph.c	/^void DestroyVertex(Vertex* V){$/;"	f
Edge	Graph.h	/^} Edge;$/;"	t	typeref:struct:tagEdge
ElementType	Graph.h	/^typedef int ElementType;$/;"	t
From	Graph.h	/^	Vertex* From;  \/\/source node$/;"	m	struct:tagEdge
GRAPH_H	Graph.h	2;"	d
Graph	Graph.h	/^} Graph;$/;"	t	typeref:struct:tagGraph
Index	Graph.h	/^	int Index;   \/\/index number$/;"	m	struct:tagVertex
Next	Graph.h	/^	struct tagEdge* Next;  $/;"	m	struct:tagEdge	typeref:struct:tagEdge::tagEdge
Next	Graph.h	/^	struct tagVertex* Next;  \/\/next vertex(list data structure)$/;"	m	struct:tagVertex	typeref:struct:tagVertex::tagVertex
NotVisited	Graph.h	/^enum Visitmode {Visited, NotVisited};$/;"	e	enum:Visitmode
OBJECTS	Makefile	/^OBJECTS = Graph.o Test.o$/;"	m
PrintGraph	Graph.c	/^void PrintGraph(Graph* G){$/;"	f
TARGET	Makefile	/^TARGET = test_target$/;"	m
Target	Graph.h	/^	Vertex* Target;  \/\/dest node$/;"	m	struct:tagEdge
Vertex	Graph.h	/^} Vertex;$/;"	t	typeref:struct:tagVertex
VertexCount	Graph.h	/^	int VertexCount; \/\/number of total node$/;"	m	struct:tagGraph
Visited	Graph.h	/^	int Visited;  \/\/is this node visited?$/;"	m	struct:tagVertex
Visited	Graph.h	/^enum Visitmode {Visited, NotVisited};$/;"	e	enum:Visitmode
Visitmode	Graph.h	/^enum Visitmode {Visited, NotVisited};$/;"	g
Weight	Graph.h	/^	int Weight;  \/\/wight value (lengh of edge, etc)$/;"	m	struct:tagEdge
main	Test.c	/^int main(void)$/;"	f
tagEdge	Graph.h	/^typedef struct tagEdge{$/;"	s
tagGraph	Graph.h	/^typedef struct tagGraph{$/;"	s
tagVertex	Graph.h	/^typedef struct tagVertex {$/;"	s
vertices	Graph.h	/^	Vertex* vertices; \/\/top pointer of vertex list$/;"	m	struct:tagGraph
