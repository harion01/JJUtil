!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BIN	Makefile	/^BIN=test_target$/;"	m
CXX	Makefile	/^CXX=g++$/;"	m
CXXFLAGS	Makefile	/^CXXFLAGS=-g -std=c++11 -Wall -c -W$/;"	m
Calculate	ExpressionTree.cpp	/^double EXPBtree::Calculate(TreeNode* Node){$/;"	f	class:EXPBtree
CreateExpNode	ExpressionTree.cpp	/^TreeNode* EXPBtree::CreateExpNode(string data){$/;"	f	class:EXPBtree
CreateExpTree	ExpressionTree.cpp	/^void EXPBtree::CreateExpTree(TreeNode** Node){$/;"	f	class:EXPBtree
Data	ExpressionTree.h	/^	string Data;$/;"	m	struct:TreeNode
EXPBtree	ExpressionTree.cpp	/^EXPBtree::EXPBtree(string PostExpression){$/;"	f	class:EXPBtree
EXPBtree	ExpressionTree.h	/^class EXPBtree : private JJparser{$/;"	c
EXPTRESSION_TREE_CPP	ExpressionTree.h	2;"	d
Exp	ExpressionTree.h	/^		vector<string> Exp;$/;"	m	class:EXPBtree
GetAnswer	ExpressionTree.cpp	/^double EXPBtree::GetAnswer(){$/;"	f	class:EXPBtree
IsNumber	JJparser.cpp	/^bool JJparser::IsNumber(char Cipher){$/;"	f	class:JJparser
JJPARSER_HEAD	JJparser.h	2;"	d
JJparser	JJparser.cpp	/^JJparser::JJparser(){$/;"	f	class:JJparser
JJparser	JJparser.h	/^class JJparser{$/;"	c
Left	ExpressionTree.h	/^	struct TreeNode* Left;$/;"	m	struct:TreeNode	typeref:struct:TreeNode::TreeNode
OBJ	Makefile	/^OBJ=$(SRC:%.cpp=%.o)$/;"	m
PrintInOrder	ExpressionTree.cpp	/^void EXPBtree::PrintInOrder(){$/;"	f	class:EXPBtree
PrintOrder	ExpressionTree.cpp	/^void EXPBtree::PrintOrder(TreeNode* Node, int Type){$/;"	f	class:EXPBtree
PrintPostOrder	ExpressionTree.cpp	/^void EXPBtree::PrintPostOrder(){$/;"	f	class:EXPBtree
PrintPreOrder	ExpressionTree.cpp	/^void EXPBtree::PrintPreOrder(){$/;"	f	class:EXPBtree
Right	ExpressionTree.h	/^	struct TreeNode* Right;$/;"	m	struct:TreeNode	typeref:struct:TreeNode::TreeNode
SRC	Makefile	/^SRC=ExpressionTree.cpp JJparser.cpp Test.cpp$/;"	m
TreeNode	ExpressionTree.h	/^struct TreeNode{$/;"	s
getToken	JJparser.cpp	/^string JJparser::getToken(string s, int startpos, string delim, int* nextpos){$/;"	f	class:JJparser
main	Test.cpp	/^int main(){$/;"	f
numbers	JJparser.h	/^		vector<char> numbers;$/;"	m	class:JJparser
parse	JJparser.cpp	/^vector<string> JJparser::parse(string s, string delim){$/;"	f	class:JJparser
parseMathExpression	JJparser.cpp	/^vector<string> JJparser::parseMathExpression(string Expression){$/;"	f	class:JJparser
removeL	JJparser.cpp	/^string JJparser::removeL(string s, string delim){$/;"	f	class:JJparser
removeR	JJparser.cpp	/^string JJparser::removeR(string s, string delim){$/;"	f	class:JJparser
removeall	JJparser.cpp	/^string JJparser::removeall(string s, string delim){$/;"	f	class:JJparser
root	ExpressionTree.h	/^		TreeNode* root;$/;"	m	class:EXPBtree
~JJparser	JJparser.cpp	/^JJparser::~JJparser(){$/;"	f	class:JJparser
